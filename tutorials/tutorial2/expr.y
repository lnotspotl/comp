%{
#include <cstdio>
#include <list>
#include <iostream>
#include <string>
#include <memory>
#include <stdexcept>
#include <stdio.h>

using namespace std;

extern FILE *yyin;         // defined in expr.lex
int yylex();               // defined in expr.lex
void yyerror(const char*); // defined in expr.lex

extern "C" {
  // this function is generated by bison from the rules in this file.
  int yyparse();
}

// helper code for string formatting.
template<typename ... Args>
std::string format( const std::string& format, Args ... args )
{
    size_t size = snprintf( nullptr, 0, format.c_str(), args ... ) + 1; // Extra space for '\0'
    if( size <= 0 ){ throw std::runtime_error( "Error during formatting." ); }
    std::unique_ptr<char[]> buf( new char[ size ] ); 
    snprintf( buf.get(), size, format.c_str(), args ... );
    return std::string( buf.get(), buf.get() + size - 1 ); // We don't want the '\0' inside
}

int getReg() {
  static int cnt = 8;
  return cnt++;
}

   
%}

// Make the output verbose
%verbose
%define parse.trace


%token REG
%token IMMEDIATE
%type  expr

%union {
  int immediate;
  int reg_val;
}
%type <immediate> IMMEDIATE
%type <reg_val> REG
%type <reg_val> expr // assume all expressions are stored in intermediate registers, this is the register

%token ASSIGN SEMI PLUS MINUS LPAREN RPAREN LBRACKET RBRACKET

%left  PLUS MINUS

%%

program:   REG ASSIGN expr SEMI { printf("REG (%d) ASSIGN expr SEMI\n", $1); } 
;

expr:  IMMEDIATE   {
   int r = getReg();
   printf("# Output of expr: IMMEDIATE\n");
   printf("AND R%d, R%d, 0\n",r,r);      // clear a register
   printf("ADD R%d, R%d, %d\n",r, r, $1); // add immediate
   $$ = r; //specify which register holds the result
} | REG {
  $$ = $1;
} | expr PLUS expr {
   int r = getReg();
   printf("# Output of expr: PLUS\n");
   printf("ADD R%d, R%d, R%d\n", r, $1, $3);
   $$ = r;
} | expr MINUS expr {
   int r = getReg();
   printf("# Output of expr: MINUS\n");
   printf("SUB R%d, R%d, R%d\n", r, $1, $3);
   $$ = r;
}
| LPAREN expr RPAREN {
   int r = getReg();
   printf("# Output of expr: LPAREN expr RPAREN\n");
   printf("ADD R%d, R%d, 0\n", r, $2);
   $$ = r;
}
| MINUS expr {
   int r = getReg();
   printf("# Output of expr: MINUS expr\n");
   printf("SUB R%d, 0, R%d\n", r, $2);
   $$ = r;
}
| LBRACKET expr RBRACKET {
   int r = getReg();
   printf("# Output of expr: LBRACKET expr RBRACKET\n");
   printf("LDR R%d, R%d, 0\n", r, $2);
   $$ = r;
}
;

%%

void yyerror(const char* msg)
{
  printf("%s",msg);
}

int main(int argc, char *argv[])
{
  yydebug = 0;
  yyin = stdin;
  yyparse();
  return 0;
}
